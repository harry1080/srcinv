enum tree_code_class {
  tcc_exceptional,
  tcc_constant,
  tcc_type,
  tcc_declaration,
  tcc_reference,
  tcc_comparison,
  tcc_unary,
  tcc_binary,
  tcc_statement,
  tcc_vl_exp,
  tcc_expression
};
enum tree_code {
ERROR_MARK,
IDENTIFIER_NODE,
TREE_LIST,
TREE_VEC,
BLOCK,
OFFSET_TYPE,
ENUMERAL_TYPE,
BOOLEAN_TYPE,
INTEGER_TYPE,
REAL_TYPE,
POINTER_TYPE,
REFERENCE_TYPE,
NULLPTR_TYPE,
FIXED_POINT_TYPE,
COMPLEX_TYPE,
VECTOR_TYPE,
ARRAY_TYPE,
RECORD_TYPE,
UNION_TYPE,
QUAL_UNION_TYPE,
VOID_TYPE,
POINTER_BOUNDS_TYPE,
FUNCTION_TYPE,
METHOD_TYPE,
LANG_TYPE,
VOID_CST,
INTEGER_CST,
REAL_CST,
FIXED_CST,
COMPLEX_CST,
VECTOR_CST,
STRING_CST,
FUNCTION_DECL,
LABEL_DECL,
FIELD_DECL,
VAR_DECL,
CONST_DECL,
PARM_DECL,
TYPE_DECL,
RESULT_DECL,
DEBUG_EXPR_DECL,
NAMESPACE_DECL,
IMPORTED_DECL,
NAMELIST_DECL,
TRANSLATION_UNIT_DECL,
COMPONENT_REF,
BIT_FIELD_REF,
ARRAY_REF,
ARRAY_RANGE_REF,
REALPART_EXPR,
IMAGPART_EXPR,
VIEW_CONVERT_EXPR,
INDIRECT_REF,
OBJ_TYPE_REF,
CONSTRUCTOR,
COMPOUND_EXPR,
MODIFY_EXPR,
INIT_EXPR,
TARGET_EXPR,
COND_EXPR,
VEC_COND_EXPR,
VEC_PERM_EXPR,
BIND_EXPR,
CALL_EXPR,
WITH_CLEANUP_EXPR,
CLEANUP_POINT_EXPR,
PLACEHOLDER_EXPR,
PLUS_EXPR,
MINUS_EXPR,
MULT_EXPR,
POINTER_PLUS_EXPR,
MULT_HIGHPART_EXPR,
TRUNC_DIV_EXPR,
CEIL_DIV_EXPR,
FLOOR_DIV_EXPR,
ROUND_DIV_EXPR,
TRUNC_MOD_EXPR,
CEIL_MOD_EXPR,
FLOOR_MOD_EXPR,
ROUND_MOD_EXPR,
RDIV_EXPR,
EXACT_DIV_EXPR,
FIX_TRUNC_EXPR,
FLOAT_EXPR,
NEGATE_EXPR,
MIN_EXPR,
MAX_EXPR,
ABS_EXPR,
LSHIFT_EXPR,
RSHIFT_EXPR,
LROTATE_EXPR,
RROTATE_EXPR,
BIT_IOR_EXPR,
BIT_XOR_EXPR,
BIT_AND_EXPR,
BIT_NOT_EXPR,
TRUTH_ANDIF_EXPR,
TRUTH_ORIF_EXPR,
TRUTH_AND_EXPR,
TRUTH_OR_EXPR,
TRUTH_XOR_EXPR,
TRUTH_NOT_EXPR,
LT_EXPR,
LE_EXPR,
GT_EXPR,
GE_EXPR,
EQ_EXPR,
NE_EXPR,
UNORDERED_EXPR,
ORDERED_EXPR,
UNLT_EXPR,
UNLE_EXPR,
UNGT_EXPR,
UNGE_EXPR,
UNEQ_EXPR,
LTGT_EXPR,
RANGE_EXPR,
PAREN_EXPR,
CONVERT_EXPR,
ADDR_SPACE_CONVERT_EXPR,
FIXED_CONVERT_EXPR,
NOP_EXPR,
NON_LVALUE_EXPR,
COMPOUND_LITERAL_EXPR,
SAVE_EXPR,
ADDR_EXPR,
FDESC_EXPR,
COMPLEX_EXPR,
CONJ_EXPR,
PREDECREMENT_EXPR,
PREINCREMENT_EXPR,
POSTDECREMENT_EXPR,
POSTINCREMENT_EXPR,
VA_ARG_EXPR,
TRY_CATCH_EXPR,
TRY_FINALLY_EXPR,
DECL_EXPR,
LABEL_EXPR,
GOTO_EXPR,
RETURN_EXPR,
EXIT_EXPR,
LOOP_EXPR,
SWITCH_EXPR,
CASE_LABEL_EXPR,
ASM_EXPR,
SSA_NAME,
CATCH_EXPR,
EH_FILTER_EXPR,
SCEV_KNOWN,
SCEV_NOT_KNOWN,
POLYNOMIAL_CHREC,
STATEMENT_LIST,
ASSERT_EXPR,
TREE_BINFO,
WITH_SIZE_EXPR,
REALIGN_LOAD_EXPR,
TARGET_MEM_REF,
MEM_REF,
OACC_PARALLEL,
OACC_KERNELS,
OACC_DATA,
OACC_HOST_DATA,
OMP_PARALLEL,
OMP_TASK,
OMP_FOR,
OMP_SIMD,
CILK_SIMD,
CILK_FOR,
OMP_DISTRIBUTE,
OMP_TASKLOOP,
OACC_LOOP,
OMP_TEAMS,
OMP_TARGET_DATA,
OMP_TARGET,
OMP_SECTIONS,
OMP_ORDERED,
OMP_CRITICAL,
OMP_SINGLE,
OMP_SECTION,
OMP_MASTER,
OMP_TASKGROUP,
OACC_CACHE,
OACC_DECLARE,
OACC_ENTER_DATA,
OACC_EXIT_DATA,
OACC_UPDATE,
OMP_TARGET_UPDATE,
OMP_TARGET_ENTER_DATA,
OMP_TARGET_EXIT_DATA,
OMP_ATOMIC,
OMP_ATOMIC_READ,
OMP_ATOMIC_CAPTURE_OLD,
OMP_ATOMIC_CAPTURE_NEW,
OMP_CLAUSE,
TRANSACTION_EXPR,
REDUC_MAX_EXPR,
REDUC_MIN_EXPR,
REDUC_PLUS_EXPR,
DOT_PROD_EXPR,
WIDEN_SUM_EXPR,
SAD_EXPR,
WIDEN_MULT_EXPR,
WIDEN_MULT_PLUS_EXPR,
WIDEN_MULT_MINUS_EXPR,
WIDEN_LSHIFT_EXPR,
FMA_EXPR,
VEC_WIDEN_MULT_HI_EXPR,
VEC_WIDEN_MULT_LO_EXPR,
VEC_WIDEN_MULT_EVEN_EXPR,
VEC_WIDEN_MULT_ODD_EXPR,
VEC_UNPACK_HI_EXPR,
VEC_UNPACK_LO_EXPR,
VEC_UNPACK_FLOAT_HI_EXPR,
VEC_UNPACK_FLOAT_LO_EXPR,
VEC_PACK_TRUNC_EXPR,
VEC_PACK_SAT_EXPR,
VEC_PACK_FIX_TRUNC_EXPR,
VEC_WIDEN_LSHIFT_HI_EXPR,
VEC_WIDEN_LSHIFT_LO_EXPR,
PREDICT_EXPR,
OPTIMIZATION_NODE,
TARGET_OPTION_NODE,
ANNOTATE_EXPR,
CILK_SPAWN_STMT,
CILK_SYNC_STMT,
LAST_AND_UNUSED_TREE_CODE,
C_MAYBE_CONST_EXPR,
EXCESS_PRECISION_EXPR,
USERDEF_LITERAL,
SIZEOF_EXPR,
ARRAY_NOTATION_REF,
UNCONSTRAINED_ARRAY_TYPE,
UNCONSTRAINED_ARRAY_REF,
NULL_EXPR,
PLUS_NOMOD_EXPR,
MINUS_NOMOD_EXPR,
POWER_EXPR,
ATTR_ADDR_EXPR,
STMT_STMT,
LOOP_STMT,
EXIT_STMT,
OFFSET_REF,
PTRMEM_CST,
NEW_EXPR,
VEC_NEW_EXPR,
DELETE_EXPR,
VEC_DELETE_EXPR,
SCOPE_REF,
MEMBER_REF,
TYPE_EXPR,
AGGR_INIT_EXPR,
VEC_INIT_EXPR,
THROW_EXPR,
EMPTY_CLASS_EXPR,
BASELINK,
TEMPLATE_DECL,
TEMPLATE_PARM_INDEX,
TEMPLATE_TEMPLATE_PARM,
TEMPLATE_TYPE_PARM,
TYPENAME_TYPE,
TYPEOF_TYPE,
BOUND_TEMPLATE_TEMPLATE_PARM,
UNBOUND_CLASS_TEMPLATE,
USING_DECL,
USING_STMT,
DEFAULT_ARG,
DEFERRED_NOEXCEPT,
TEMPLATE_ID_EXPR,
OVERLOAD,
PSEUDO_DTOR_EXPR,
MODOP_EXPR,
CAST_EXPR,
REINTERPRET_CAST_EXPR,
CONST_CAST_EXPR,
STATIC_CAST_EXPR,
DYNAMIC_CAST_EXPR,
IMPLICIT_CONV_EXPR,
DOTSTAR_EXPR,
TYPEID_EXPR,
NOEXCEPT_EXPR,
NON_DEPENDENT_EXPR,
CTOR_INITIALIZER,
TRY_BLOCK,
EH_SPEC_BLOCK,
HANDLER,
MUST_NOT_THROW_EXPR,
CLEANUP_STMT,
IF_STMT,
FOR_STMT,
RANGE_FOR_STMT,
WHILE_STMT,
DO_STMT,
BREAK_STMT,
CONTINUE_STMT,
SWITCH_STMT,
EXPR_STMT,
TAG_DEFN,
OFFSETOF_EXPR,
ARROW_EXPR,
ALIGNOF_EXPR,
AT_ENCODE_EXPR,
STMT_EXPR,
UNARY_PLUS_EXPR,
STATIC_ASSERT,
TYPE_ARGUMENT_PACK,
NONTYPE_ARGUMENT_PACK,
TYPE_PACK_EXPANSION,
EXPR_PACK_EXPANSION,
ARGUMENT_PACK_SELECT,
UNARY_LEFT_FOLD_EXPR,
UNARY_RIGHT_FOLD_EXPR,
BINARY_LEFT_FOLD_EXPR,
BINARY_RIGHT_FOLD_EXPR,
TRAIT_EXPR,
LAMBDA_EXPR,
DECLTYPE_TYPE,
UNDERLYING_TYPE,
BASES,
TEMPLATE_INFO,
CONSTRAINT_INFO,
WILDCARD_DECL,
REQUIRES_EXPR,
SIMPLE_REQ,
TYPE_REQ,
COMPOUND_REQ,
NESTED_REQ,
PRED_CONSTR,
CHECK_CONSTR,
EXPR_CONSTR,
TYPE_CONSTR,
ICONV_CONSTR,
DEDUCT_CONSTR,
EXCEPT_CONSTR,
PARM_CONSTR,
CONJ_CONSTR,
DISJ_CONSTR,
IASM_EXPR,
UNSIGNED_RSHIFT_EXPR,
FLOAT_MOD_EXPR,
FUNCFRAME_INFO,
URSHIFT_EXPR,
COMPARE_EXPR,
COMPARE_L_EXPR,
COMPARE_G_EXPR,
CLASS_INTERFACE_TYPE,
CLASS_IMPLEMENTATION_TYPE,
CATEGORY_INTERFACE_TYPE,
CATEGORY_IMPLEMENTATION_TYPE,
PROTOCOL_INTERFACE_TYPE,
KEYWORD_DECL,
INSTANCE_METHOD_DECL,
CLASS_METHOD_DECL,
PROPERTY_DECL,
MESSAGE_SEND_EXPR,
CLASS_REFERENCE_EXPR,
PROPERTY_REF,
MAX_TREE_CODES
};
static const enum tree_code_class tree_code_type[] = {
tcc_exceptional,
tcc_exceptional,
tcc_exceptional,
tcc_exceptional,
tcc_exceptional,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_constant,
tcc_constant,
tcc_constant,
tcc_constant,
tcc_constant,
tcc_constant,
tcc_constant,
tcc_declaration,
tcc_declaration,
tcc_declaration,
tcc_declaration,
tcc_declaration,
tcc_declaration,
tcc_declaration,
tcc_declaration,
tcc_declaration,
tcc_declaration,
tcc_declaration,
tcc_declaration,
tcc_declaration,
tcc_reference,
tcc_reference,
tcc_reference,
tcc_reference,
tcc_reference,
tcc_reference,
tcc_reference,
tcc_reference,
tcc_expression,
tcc_exceptional,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_vl_exp,
tcc_expression,
tcc_expression,
tcc_exceptional,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_unary,
tcc_unary,
tcc_unary,
tcc_binary,
tcc_binary,
tcc_unary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_unary,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_comparison,
tcc_comparison,
tcc_comparison,
tcc_comparison,
tcc_comparison,
tcc_comparison,
tcc_comparison,
tcc_comparison,
tcc_comparison,
tcc_comparison,
tcc_comparison,
tcc_comparison,
tcc_comparison,
tcc_comparison,
tcc_binary,
tcc_unary,
tcc_unary,
tcc_unary,
tcc_unary,
tcc_unary,
tcc_unary,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_binary,
tcc_unary,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_exceptional,
tcc_statement,
tcc_statement,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_exceptional,
tcc_expression,
tcc_exceptional,
tcc_expression,
tcc_expression,
tcc_reference,
tcc_reference,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_exceptional,
tcc_expression,
tcc_unary,
tcc_unary,
tcc_unary,
tcc_expression,
tcc_binary,
tcc_expression,
tcc_binary,
tcc_expression,
tcc_expression,
tcc_binary,
tcc_expression,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_unary,
tcc_unary,
tcc_unary,
tcc_unary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_expression,
tcc_exceptional,
tcc_exceptional,
tcc_expression,
tcc_statement,
tcc_statement,
tcc_exceptional,
tcc_expression,
tcc_expression,
tcc_exceptional,
tcc_expression,
tcc_reference,
tcc_type,
tcc_reference,
tcc_expression,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_reference,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_reference,
tcc_constant,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_reference,
tcc_reference,
tcc_expression,
tcc_vl_exp,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_exceptional,
tcc_declaration,
tcc_exceptional,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_declaration,
tcc_statement,
tcc_exceptional,
tcc_exceptional,
tcc_expression,
tcc_exceptional,
tcc_expression,
tcc_expression,
tcc_unary,
tcc_unary,
tcc_unary,
tcc_unary,
tcc_unary,
tcc_unary,
tcc_expression,
tcc_expression,
tcc_unary,
tcc_expression,
tcc_expression,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_expression,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_statement,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_unary,
tcc_exceptional,
tcc_type,
tcc_expression,
tcc_type,
tcc_expression,
tcc_exceptional,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_exceptional,
tcc_exceptional,
tcc_type,
tcc_type,
tcc_type,
tcc_exceptional,
tcc_exceptional,
tcc_declaration,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_expression,
tcc_statement,
tcc_binary,
tcc_binary,
tcc_exceptional,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_binary,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_type,
tcc_declaration,
tcc_declaration,
tcc_declaration,
tcc_declaration,
tcc_expression,
tcc_expression,
tcc_expression,
};
static const unsigned char tree_code_length[] = {
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
3,
3,
4,
4,
1,
1,
1,
1,
3,
0,
2,
2,
2,
4,
3,
3,
3,
3,
3,
1,
1,
0,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
1,
1,
1,
2,
2,
1,
2,
2,
2,
2,
2,
2,
2,
1,
2,
2,
2,
2,
2,
1,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
2,
1,
1,
1,
1,
1,
1,
1,
1,
1,
2,
2,
1,
2,
2,
2,
2,
1,
2,
2,
1,
1,
1,
1,
1,
1,
3,
4,
5,
0,
2,
2,
0,
0,
3,
0,
2,
0,
2,
3,
5,
2,
2,
2,
2,
2,
2,
2,
7,
7,
7,
7,
7,
7,
7,
2,
2,
2,
2,
2,
3,
2,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
1,
2,
1,
2,
2,
0,
1,
1,
1,
1,
3,
2,
3,
2,
3,
3,
2,
3,
2,
2,
2,
2,
1,
1,
1,
1,
2,
2,
2,
2,
2,
1,
0,
0,
2,
1,
0,
0,
2,
1,
3,
1,
4,
0,
1,
1,
2,
2,
2,
1,
1,
4,
2,
2,
0,
4,
3,
2,
2,
2,
2,
1,
3,
2,
1,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
1,
0,
0,
2,
0,
3,
3,
1,
1,
1,
1,
1,
1,
2,
1,
1,
1,
1,
2,
2,
2,
2,
3,
4,
5,
4,
2,
2,
0,
0,
4,
1,
0,
1,
1,
1,
1,
1,
1,
0,
0,
1,
0,
3,
0,
2,
2,
3,
3,
0,
0,
0,
0,
0,
0,
0,
0,
2,
1,
1,
2,
1,
1,
2,
1,
1,
2,
3,
1,
2,
2,
2,
5,
2,
2,
0,
2,
2,
2,
2,
0,
0,
0,
0,
0,
0,
0,
0,
0,
3,
1,
4,
};
static const char *const tree_code_name[] = {
"error_mark",
"identifier_node",
"tree_list",
"tree_vec",
"block",
"offset_type",
"enumeral_type",
"boolean_type",
"integer_type",
"real_type",
"pointer_type",
"reference_type",
"nullptr_type",
"fixed_point_type",
"complex_type",
"vector_type",
"array_type",
"record_type",
"union_type",
"qual_union_type",
"void_type",
"pointer_bounds_type",
"function_type",
"method_type",
"lang_type",
"void_cst",
"integer_cst",
"real_cst",
"fixed_cst",
"complex_cst",
"vector_cst",
"string_cst",
"function_decl",
"label_decl",
"field_decl",
"var_decl",
"const_decl",
"parm_decl",
"type_decl",
"result_decl",
"debug_expr_decl",
"namespace_decl",
"imported_decl",
"namelist_decl",
"translation_unit_decl",
"component_ref",
"bit_field_ref",
"array_ref",
"array_range_ref",
"realpart_expr",
"imagpart_expr",
"view_convert_expr",
"indirect_ref",
"obj_type_ref",
"constructor",
"compound_expr",
"modify_expr",
"init_expr",
"target_expr",
"cond_expr",
"vec_cond_expr",
"vec_perm_expr",
"bind_expr",
"call_expr",
"with_cleanup_expr",
"cleanup_point_expr",
"placeholder_expr",
"plus_expr",
"minus_expr",
"mult_expr",
"pointer_plus_expr",
"mult_highpart_expr",
"trunc_div_expr",
"ceil_div_expr",
"floor_div_expr",
"round_div_expr",
"trunc_mod_expr",
"ceil_mod_expr",
"floor_mod_expr",
"round_mod_expr",
"rdiv_expr",
"exact_div_expr",
"fix_trunc_expr",
"float_expr",
"negate_expr",
"min_expr",
"max_expr",
"abs_expr",
"lshift_expr",
"rshift_expr",
"lrotate_expr",
"rrotate_expr",
"bit_ior_expr",
"bit_xor_expr",
"bit_and_expr",
"bit_not_expr",
"truth_andif_expr",
"truth_orif_expr",
"truth_and_expr",
"truth_or_expr",
"truth_xor_expr",
"truth_not_expr",
"lt_expr",
"le_expr",
"gt_expr",
"ge_expr",
"eq_expr",
"ne_expr",
"unordered_expr",
"ordered_expr",
"unlt_expr",
"unle_expr",
"ungt_expr",
"unge_expr",
"uneq_expr",
"ltgt_expr",
"range_expr",
"paren_expr",
"convert_expr",
"addr_space_convert_expr",
"fixed_convert_expr",
"nop_expr",
"non_lvalue_expr",
"compound_literal_expr",
"save_expr",
"addr_expr",
"fdesc_expr",
"complex_expr",
"conj_expr",
"predecrement_expr",
"preincrement_expr",
"postdecrement_expr",
"postincrement_expr",
"va_arg_expr",
"try_catch_expr",
"try_finally",
"decl_expr",
"label_expr",
"goto_expr",
"return_expr",
"exit_expr",
"loop_expr",
"switch_expr",
"case_label_expr",
"asm_expr",
"ssa_name",
"catch_expr",
"eh_filter_expr",
"scev_known",
"scev_not_known",
"polynomial_chrec",
"statement_list",
"assert_expr",
"tree_binfo",
"with_size_expr",
"realign_load",
"target_mem_ref",
"mem_ref",
"oacc_parallel",
"oacc_kernels",
"oacc_data",
"oacc_host_data",
"omp_parallel",
"omp_task",
"omp_for",
"omp_simd",
"cilk_simd",
"cilk_for",
"omp_distribute",
"omp_taskloop",
"oacc_loop",
"omp_teams",
"omp_target_data",
"omp_target",
"omp_sections",
"omp_ordered",
"omp_critical",
"omp_single",
"omp_section",
"omp_master",
"omp_taskgroup",
"oacc_cache",
"oacc_declare",
"oacc_enter_data",
"oacc_exit_data",
"oacc_update",
"omp_target_update",
"omp_target_enter_data",
"omp_target_exit_data",
"omp_atomic",
"omp_atomic_read",
"omp_atomic_capture_old",
"omp_atomic_capture_new",
"omp_clause",
"transaction_expr",
"reduc_max_expr",
"reduc_min_expr",
"reduc_plus_expr",
"dot_prod_expr",
"widen_sum_expr",
"sad_expr",
"widen_mult_expr",
"widen_mult_plus_expr",
"widen_mult_minus_expr",
"widen_lshift_expr",
"fma_expr",
"widen_mult_hi_expr",
"widen_mult_lo_expr",
"widen_mult_even_expr",
"widen_mult_odd_expr",
"vec_unpack_hi_expr",
"vec_unpack_lo_expr",
"vec_unpack_float_hi_expr",
"vec_unpack_float_lo_expr",
"vec_pack_trunc_expr",
"vec_pack_sat_expr",
"vec_pack_fix_trunc_expr",
"widen_lshift_hi_expr",
"widen_lshift_lo_expr",
"predict_expr",
"optimization_node",
"target_option_node",
"annotate_expr",
"cilk_spawn_stmt",
"cilk_sync_stmt",
"@dummy",
"c_maybe_const_expr",
"excess_precision_expr",
"userdef_literal",
"sizeof_expr",
"array_notation_ref",
"unconstrained_array_type",
"unconstrained_array_ref",
"null_expr",
"plus_nomod_expr",
"minus_nomod_expr",
"power_expr",
"attr_addr_expr",
"stmt_stmt",
"loop_stmt",
"exit_stmt",
"offset_ref",
"ptrmem_cst",
"nw_expr",
"vec_nw_expr",
"dl_expr",
"vec_dl_expr",
"scope_ref",
"member_ref",
"type_expr",
"aggr_init_expr",
"vec_init_expr",
"throw_expr",
"empty_class_expr",
"baselink",
"template_decl",
"template_parm_index",
"template_template_parm",
"template_type_parm",
"typename_type",
"typeof_type",
"bound_template_template_parm",
"unbound_class_template",
"using_decl",
"using_stmt",
"default_arg",
"deferred_noexcept",
"template_id_expr",
"overload",
"pseudo_dtor_expr",
"modop_expr",
"cast_expr",
"reinterpret_cast_expr",
"const_cast_expr",
"static_cast_expr",
"dynamic_cast_expr",
"implicit_conv_expr",
"dotstar_expr",
"typeid_expr",
"noexcept_expr",
"non_dependent_expr",
"ctor_initializer",
"try_block",
"eh_spec_block",
"handler",
"must_not_throw_expr",
"cleanup_stmt",
"if_stmt",
"for_stmt",
"range_for_stmt",
"while_stmt",
"do_stmt",
"break_stmt",
"continue_stmt",
"switch_stmt",
"expr_stmt",
"tag_defn",
"offsetof_expr",
"arrow_expr",
"alignof_expr",
"at_encode_expr",
"stmt_expr",
"unary_plus_expr",
"static_assert",
"type_argument_pack",
"nontype_argument_pack",
"type_pack_expansion",
"expr_pack_expansion",
"argument_pack_select",
"unary_left_fold_expr",
"unary_right_fold_expr",
"binary_left_fold_expr",
"binary_right_fold_expr",
"trait_expr",
"lambda_expr",
"decltype_type",
"underlying_type",
"bases",
"template_info",
"constraint_info",
"wildcard_decl",
"requires_expr",
"simple_req",
"type_req",
"compound_req",
"nested_req",
"pred_constr",
"check_constr",
"expr_constr",
"type_constr",
"iconv_constr",
"deduct_constr",
"except_constr",
"parm_constr",
"conj_constr",
"disj_constr",
"iasm_expr",
"unsigned_rshift_expr",
"float_mod_expr",
"funcframe_info",
"urshift_expr",
"compare_expr",
"compare_l_expr",
"compare_g_expr",
"class_interface_type",
"class_implementation_type",
"category_interface_type",
"category_implementation_type",
"protocol_interface_type",
"keyword_decl",
"instance_method_decl",
"class_method_decl",
"property_decl",
"message_send_expr",
"class_reference_expr",
"property_ref",
};
